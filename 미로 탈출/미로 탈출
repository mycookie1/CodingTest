#include <string>
#include <vector>
#include <iostream>

using namespace std;
int visited[101][101];
vector<string> board;
int moveX[4] = {0, 1, 0, -1};
int moveY[4] = {1, 0, -1, 0};


//범위 계산
bool boundary(int x, int y) {
    if( x >= 0 && x < board.size() && y >= 0 && y < board[0].size()) return true;
    else return false;
}

// 이동함수
void func(int x, int y, int cnt, char word) {
    // 상하좌우 이동
    for(int i = 0; i < 4; i++) {
        int tempX = x + moveX[i];
        int tempY = y + moveY[i];
        // 범위, X가 아닌곳, 이전보다 작은 visited만 가능
        if(boundary(tempX, tempY) && board[tempX][tempY] != 'X' && visited[tempX][tempY] > cnt + 1) {
            visited[tempX][tempY] = cnt + 1;
            if(board[tempX][tempY] == word) {
                
            }
            else {
                func(tempX, tempY, cnt+1, word);    
            }
        }
    }
}

int solution(vector<string> maps) {
    int answer = -1;
    // 시작점
    int x ,y = 0;
    // 레버 위치
    int lX, lY = 0;
    // 마지막 위치
    int ex, ey = 0;
    
    // 위치 찾기 
    for(int i = 0; i < maps.size(); i++) {
        string temp = "";
        for(int j = 0; j < maps[0].size(); j++) {
            visited[i][j] = 99999999;
            if(maps[i][j] == 'S') {
                x = i;
                y = j;
            }
            if(maps[i][j] == 'L') {
                lX = i;
                lY = j;
            }
            if(maps[i][j] == 'E') {
                ex = i;
                ey = j;
            }
            temp += maps[i][j];
        }
        board.push_back(temp);
    }
    
    // 레버까지 최단시간 구하기
    func(x,y,0,'L');
    
    // 레버까지 가지 못하면
    if(visited[lX][lY] == 99999999) {
        answer = -1;
    }
    // 레버까지 도착
    else {
        answer = visited[lX][lY];
        // visited 초기화
        for(int i = 0; i < maps.size(); i++) {
            for(int j = 0; j < maps[0].size(); j++) {
                visited[i][j] = 99999999;
            }
        }
        // 레버에서 도착지점까지 최단시간 
        func(lX,lY,answer,'E');
        if(visited[ex][ey] == 99999999) {
            answer = -1;
        }
        else {
            answer = visited[ex][ey];
        }
        
    }
    
    return answer;
}