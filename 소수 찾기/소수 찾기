#include <string>
#include <vector>
#include <map>
#include <iostream>
using namespace std;

int combinationArr[8];
int permutationArr[8];
vector<int> v;
bool check[8];
// 조합
// 소수 판단
// map
map<int, int> m;
int n = 0;

bool check_prime_number(int number) {
    bool check = true;
    int n = 1;
    while(1) {
        if(number == n*n) return false;
        else if(number < n * n) break;
        else n++;
    }
    n--;
    for(int i = 2; i <= n; i++ ) {
        if(number % i == 0) {
            check = false;
            break;
        }
    }
    if(number == 1 || number == 0) check = false;
    return check;
}

int make_number(int goal) {
    int temp = 0;
    for(int i = 0; i < goal; i++) {
        temp *= 10;
        temp += permutationArr[i];
    }  
    return temp;
}


void permutation(int depth, int goal){
    if(depth == goal){
        int temp = make_number(goal);
        if (check_prime_number(temp)) {
            m.insert(make_pair(temp,temp));
        }
        return;
    }

    for(int i = 0; i < goal; i++){  
        if(!check[i]){
            check[i] = true;
            permutationArr[depth] = combinationArr[i];
            permutation(depth + 1, goal);
            check[i] = false;
        }
    }
}




void combination(int depth, int next, int goal){
    if(depth == goal) {
        permutation(0, goal);
        return;
    }

    for(int i = next; i < n; i++){
        combinationArr[depth] = v[i];
        combination(depth + 1, i + 1, goal);
    }
    
}

int solution(string numbers) {
    int answer = 0;
    n = numbers.length();
    
    for(int i = 0; i < numbers.length(); i++) {
        v.push_back(numbers[i] - '0');
    }
    
    for(int i = 1; i <= v.size(); i++) {
        combination(0,0,i);
    }
    answer = m.size();
    return answer;
}